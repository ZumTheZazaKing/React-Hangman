{"version":3,"sources":["Letter.js","Ingame.js"],"names":["Letter","props","onClick","e","chooseLetter","className","letter","Ingame","history","useHistory","useContext","Context","word","wordHint","lives","setLives","setResult","useEffect","push","useState","replace","hiddenWord","setHiddenWord","open","setOpen","chosenLetters","setChosenLetters","alphabet","includes","target","innerHTML","tempHiddenWord","i","length","charAt","revealWord","detectResult","setInterval","clearInterval","resetLocalValues","id","split","map","Snackbar","message","autoHideDuration","onClose"],"mappings":"mLAAO,SAASA,EAAOC,GACnB,OAAQ,sBAAMC,QAAS,SAAAC,GAAC,OAAIF,EAAMG,aAAaD,IAAIE,UAAU,SAArD,SACHJ,EAAMK,S,0BCKR,SAASC,IAEZ,IAAMC,EAAUC,cAEhB,EAAqDC,qBAAWC,KAA1DC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,SAAUC,EAAvC,EAAuCA,UAEvCC,qBAAU,WACFL,GAAKJ,EAAQU,KAAK,QAG1B,MAAoCC,mBAASP,EAAKQ,QAAQ,MAAO,MAAjE,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBH,oBAAS,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAA0CL,mBAAS,IAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KAIMC,EAAW,6BAEjB,SAASvB,EAAaD,GAClB,GAAGsB,EAAcG,SAASzB,EAAE0B,OAAOC,WAAW,OAAON,GAAQ,GAC7DE,EAAiB,GAAD,mBAAKD,GAAL,CAAoBtB,EAAE0B,OAAOC,aAE1ClB,EAAKgB,SAASzB,EAAE0B,OAAOC,WAO9B,SAAoBxB,GAEhB,IADA,IAAMyB,EAAc,YAAOV,GACnBW,EAAI,EAAGA,EAAIpB,EAAKqB,OAAQD,IACzBpB,EAAKsB,OAAOF,KAAO1B,IAAOyB,EAAeC,GAAK1B,GAErDgB,EAAcS,GAXVI,CAAWhC,EAAE0B,OAAOC,WAexBf,EAASD,EAAQ,GAGrB,IAAMsB,EAAeC,aAAY,WACzBhB,EAAWO,SAAS,OACpBZ,EAAU,cACVR,EAAQU,KAAK,QACboB,cAAcF,GACdG,KAES,IAAVzB,IACCE,EAAU,aACVR,EAAQU,KAAK,QACboB,cAAcF,GACdG,OAEN,KAEF,SAASA,IACLf,GAAQ,GACRE,EAAiB,IAGrB,OAAQ,sBAAKc,GAAG,SAAR,UACJ,mBAAGA,GAAG,aAAN,SAAoBnB,IACpB,mBAAGmB,GAAG,WAAN,SAAkB3B,IAElB,sBAAK2B,GAAG,UAAR,UACiBb,EAASc,MAAM,IAAIC,KAAI,SAAApC,GAAM,OAAI,cAACN,EAAD,CAAQI,aAAcA,EAAcE,OAAQA,EAA5C,SAAqDA,OACnG,wCAAWQ,QAEf,cAAC6B,EAAA,EAAD,CAAUC,QAAQ,sBAAsBrB,KAAMA,EAAMsB,iBAAkB,IAAMC,QAvD5D,kBAAMtB,GAAQ","file":"static/js/5.f9c72cdb.chunk.js","sourcesContent":["export function Letter(props){\n    return (<span onClick={e => props.chooseLetter(e)} className=\"letter\">\n        {props.letter}\n    </span>)\n}","import { Context } from './Contexts/Context';\nimport { Letter } from './Letter';\n\nimport { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nexport function Ingame(){\n\n    const history = useHistory();\n\n    let { word, wordHint, lives, setLives, setResult } = useContext(Context);\n\n    useEffect(() => {\n        if(!word)history.push(\"/\");\n    })\n\n    const [hiddenWord, setHiddenWord] = useState(word.replace(/\\w/g, \"_\"));\n    const [open, setOpen] = useState(false);\n    const [chosenLetters, setChosenLetters] = useState([]);\n\n    const handleClose = () => setOpen(false);\n\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\n    function chooseLetter(e){\n        if(chosenLetters.includes(e.target.innerHTML))return setOpen(true);\n        setChosenLetters([...chosenLetters, e.target.innerHTML]);\n\n        if(word.includes(e.target.innerHTML)){\n            revealWord(e.target.innerHTML);\n        } else {\n            takeAwayLife()\n        }\n    }\n\n    function revealWord(letter){\n        const tempHiddenWord = [...hiddenWord];\n        for(var i = 0; i < word.length; i++){\n            if(word.charAt(i) === letter)tempHiddenWord[i] = letter;\n        }\n        setHiddenWord(tempHiddenWord);\n    }\n\n    function takeAwayLife(){\n        setLives(lives - 1)\n    }\n\n    const detectResult = setInterval(() => {\n        if(!hiddenWord.includes(\"_\")){\n            setResult(\"YOU WIN!!!\");\n            history.push(\"/end\");\n            clearInterval(detectResult);\n            resetLocalValues();\n        }\n        if(lives === 0){\n            setResult(\"GAME OVER\");\n            history.push(\"/end\");\n            clearInterval(detectResult);\n            resetLocalValues();\n        }\n    },100);\n\n    function resetLocalValues(){\n        setOpen(false);\n        setChosenLetters([]);\n    }\n\n    return (<div id=\"ingame\">\n        <p id=\"hiddenWord\">{hiddenWord}</p>\n        <p id=\"wordHint\">{wordHint}</p>\n\n        <div id=\"letters\">\n            {alphabet && alphabet.split(\"\").map(letter => <Letter chooseLetter={chooseLetter} letter={letter}>{letter}</Letter>)}\n            <p>Lives: {lives}</p>\n        </div>\n        <Snackbar message=\"Letter already used\" open={open} autoHideDuration={2000} onClose={handleClose}/>\n    </div>)\n}"],"sourceRoot":""}